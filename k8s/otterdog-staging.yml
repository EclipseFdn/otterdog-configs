apiVersion: apps/v1
kind: Deployment
metadata:
  name: otterdog-staging
  namespace: foundation-internal-security-otterdog
  labels:
    app: otterdog
    environment: staging
spec:
  selector:
    matchLabels:
      app: otterdog
      environment: staging
  replicas: 1
  template:
    metadata:
      labels:
        app: otterdog
        environment: staging
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: speed
                operator: NotIn
                values:
                - fast
            weight: 1
      containers:
      - name: app
        image: ghcr.io/eclipse-csi/otterdog:0.12.0-SNAPSHOT
        args:
        - ./start-webapp
        livenessProbe:
          httpGet:
            path: /internal/health
            port: 5000
          initialDelaySeconds: 10
          periodSeconds: 15
        imagePullPolicy: Always
        ports:
        - containerPort: 5000
        resources:
          limits:
            cpu: 1000m
            memory: 2048Mi
          requests:
            cpu: 300m
            memory: 512Mi
        volumeMounts:
        - name: config
          mountPath: "/app/.env"
          subPath: ".env"
          readOnly: true
        - name: github-app-key
          mountPath: "/app/work/config"
          readOnly: true
        - mountPath: "/app/work"
          name: work

      initContainers:
      - name: wait-for-services
        image: busybox
        command: ["/bin/sh", "-c"]
        args: ["until echo 'Waiting for mongodb...' && nc -vz -w 2 mongodb-staging 27017 && echo 'Waiting for redis...' && nc -vz -w 2 redis-staging 6379 && echo 'Waiting for ghproxy...' && nc -vz -w 2 ghproxy-staging 8888; do echo 'Looping forever...'; sleep 2; done;"]

      volumes:
      - name: config
        configMap:
          name: otterdog-staging-env
          items:
            - key: "env"
              path: ".env"
      - name: github-app-key
        secret:
          secretName: otterdog-staging-secrets
      - emptyDir: { }
        name: work
---
apiVersion: "v1"
kind: "Service"
metadata:
  name: otterdog-staging
  namespace: foundation-internal-security-otterdog
spec:
  ports:
  - name: "http"
    port: 80
    protocol: "TCP"
    targetPort: 5000
  selector:
    app: otterdog
    environment: staging
---
apiVersion: "route.openshift.io/v1"
kind: "Route"
metadata:
  name: otterdog-staging
  namespace: foundation-internal-security-otterdog
  annotations:
    haproxy.router.openshift.io/timeout: 20s
    haproxy.router.openshift.io/disable_cookies: "true"
    haproxy.router.openshift.io/balance: roundrobin
spec:
  host: "otterdog-staging.eclipse.org"
  path: "/"
  port:
    targetPort: "http"
  tls:
    insecureEdgeTerminationPolicy: "Redirect"
    termination: "edge"
  to:
    kind: "Service"
    name: otterdog-staging
    weight: 100
---
apiVersion: "route.openshift.io/v1"
kind: "Route"
metadata:
  name: otterdog-protect-init-staging
  namespace: foundation-internal-security-otterdog
  annotations:
    haproxy.router.openshift.io/ip_whitelist: 127.0.0.1
spec:
  host: "otterdog-staging.eclipse.org"
  path: "/internal/"
  port:
    targetPort: "http"
  tls:
    insecureEdgeTerminationPolicy: "Redirect"
    termination: "edge"
  to:
    kind: "Service"
    name: otterdog-staging
    weight: 100
---
apiVersion: batch/v1
kind: Job
metadata:
  name: init-webapp-staging
  namespace: foundation-internal-security-otterdog
spec:
  template:
    spec:
      containers:
        - name: init-webapp-staging
          image: ghcr.io/eclipse-csi/otterdog:0.12.0-SNAPSHOT
          command: [ "/bin/bash", "/app/init-webapp", "otterdog-staging", "80" ]
      restartPolicy: Never
  backoffLimit: 4
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: trigger-policy-check-staging
  namespace: foundation-internal-security-otterdog
spec:
  schedule: "*/5 * * * *"
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: check
            image: curlimages/curl:8.10.1
            imagePullPolicy: IfNotPresent
            command:
            - /bin/sh
            - -c
            - curl -I http://otterdog-staging:80/internal/check/10
          restartPolicy: Never
